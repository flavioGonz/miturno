<!--
  File: /home/fgonzalez/turnito/views/sistema/publicidad.ejs
  Descripción: Gestión de imágenes publicitarias y previsualización del monitor
  Versión: 4.1 - Botón flotante y vista sincronizada
-->

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-info m-0">
      <i class="ti ti-photo"></i> Publicidad en Pantalla
    </h2>
    <button id="btnReloadAds" class="btn btn-outline-info">
      <i class="ti ti-refresh"></i> Actualizar lista
    </button>
  </div>

  <div class="row">
    <!-- Izquierda: Subida y listado -->
    <div class="col-md-5 col-lg-4">
      <div class="card bg-dark border-0 shadow-sm p-3 mb-4">
        <h4 class="text-light mb-3"><i class="ti ti-upload"></i> Subir nueva imagen</h4>
        <form id="uploadForm" enctype="multipart/form-data">
          <input class="form-control bg-dark text-light border-0 mb-3" type="file" name="adFile" accept=".jpg,.jpeg,.png,.gif" required>
          <button type="submit" class="btn btn-outline-success w-100">
            <i class="ti ti-device-floppy"></i> Subir Imagen
          </button>
        </form>
      </div>

      <div class="card bg-dark border-0 shadow-sm p-3 mb-4">
        <h4 class="text-light mb-3"><i class="ti ti-list"></i> Imágenes actuales</h4>
        <ul id="adsList" class="list-group list-group-flush bg-dark"></ul>
      </div>

      <div class="card bg-dark border-0 shadow-sm p-3">
        <h4 class="text-light mb-3"><i class="ti ti-clock"></i> Intervalo de rotación</h4>
        <input type="number" id="intervalInput" class="form-control bg-dark text-light border-0 mb-3" min="3" max="60" step="1" value="8">
        <button id="saveInterval" class="btn btn-outline-primary w-100">
          <i class="ti ti-check"></i> Guardar Intervalo
        </button>
      </div>

      <div id="adsMsg" class="alert d-none mt-3"></div>
    </div>

    <!-- Derecha: Vista del monitor -->
    <div class="col-md-7 col-lg-8 position-relative">
      <div class="card bg-black border-0 shadow-sm p-2 mb-3 position-relative overflow-hidden">
        <iframe
          id="adsPreview"
          src="/monitor"
          width="100%"
          height="600"
          style="border:none;border-radius:6px;background:#000;"
        ></iframe>

        <!-- Botón flotante -->
        <button
          id="refreshPreview"
          class="btn btn-outline-secondary position-absolute"
          style="bottom:20px; right:20px; border-radius:50%; width:50px; height:50px; display:flex; justify-content:center; align-items:center;"
          title="Recargar vista"
        >
          <i class="ti ti-refresh fs-4"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const adsList = document.getElementById('adsList');
  const uploadForm = document.getElementById('uploadForm');
  const btnReloadAds = document.getElementById('btnReloadAds');
  const intervalInput = document.getElementById('intervalInput');
  const saveInterval = document.getElementById('saveInterval');
  const adsMsg = document.getElementById('adsMsg');
  const adsPreview = document.getElementById('adsPreview');
  const refreshPreview = document.getElementById('refreshPreview');

  const showMsg = (msg, type = 'info') => {
    adsMsg.className = `alert alert-${type} mt-3`;
    adsMsg.textContent = msg;
    adsMsg.classList.remove('d-none');
    setTimeout(() => adsMsg.classList.add('d-none'), 5000);
  };

  const getJSON = async (url) => {
    try {
      const res = await fetch(url, { credentials: 'include' });
      const txt = await res.text();
      return JSON.parse(txt);
    } catch {
      return {};
    }
  };

  async function loadAds() {
    const data = await getJSON('/api/ads');
    adsList.innerHTML = '';
    if (!data.files?.length) {
      adsList.innerHTML = `<li class="list-group-item bg-dark text-light border-0">Sin imágenes cargadas</li>`;
    } else {
      data.files.forEach(file => {
        const li = document.createElement('li');
        li.className = 'list-group-item bg-dark text-light d-flex justify-content-between align-items-center border-0';
        li.innerHTML = `
          <span><i class="ti ti-photo"></i> ${file}</span>
          <button class="btn btn-sm btn-outline-danger" data-file="${file}">
            <i class="ti ti-trash"></i>
          </button>
        `;
        li.querySelector('button').onclick = async () => {
          if (!confirm('¿Eliminar esta imagen?')) return;
          const res = await fetch('/api/ads/' + file, { method: 'DELETE', credentials: 'include' });
          const json = await res.json();
          showMsg(json.message || 'Imagen eliminada', 'success');
          loadAds();
        };
        adsList.appendChild(li);
      });
    }
    if (data.interval) intervalInput.value = data.interval;
  }

  uploadForm.onsubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData(uploadForm);
    const res = await fetch('/api/ads', {
      method: 'POST',
      body: formData,
      credentials: 'include'
    });
    const data = await res.json();
    showMsg(data.message || 'Imagen subida', 'success');
    uploadForm.reset();
    loadAds();
  };

  btnReloadAds.onclick = loadAds;

  saveInterval.onclick = async () => {
    const res = await fetch('/api/ads/interval', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ interval: intervalInput.value })
    });
    const data = await res.json();
    showMsg(data.message || 'Intervalo actualizado', 'success');
  };

  refreshPreview.onclick = () => {
    adsPreview.src = '/monitor?cache=' + Date.now();
  };

  loadAds();
});
</script>
